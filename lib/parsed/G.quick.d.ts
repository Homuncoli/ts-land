// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

import { DamageType, Looks } from "../gamedata/class";
import { Block, MiscCondition } from "../gamedata/conditions";

export interface Craft {
    pouchbow:        SantiagoDeCaliRaven;
    platinumingot:   SantiagoDeCaliRaven;
    elixirstr2:      SantiagoDeCaliRaven;
    resistancering:  Armorring;
    wbreeches:       Armorring;
    wgloves:         Armorring;
    snakeoil:        Armorring;
    rod:             SantiagoDeCaliRaven;
    elixirfzres:     Armorring;
    wcap:            Armorring;
    hbow:            Armorring;
    daggerofthedead: SantiagoDeCaliRaven;
    computer:        SantiagoDeCaliRaven;
    mushroomstaff:   SantiagoDeCaliRaven;
    firestars:       SantiagoDeCaliRaven;
    cclaw:           SantiagoDeCaliRaven;
    quiver:          Armorring;
    fierygloves:     SantiagoDeCaliRaven;
    offeringx:       SantiagoDeCaliRaven;
    ctristone:       SantiagoDeCaliRaven;
    bfangamulet:     SantiagoDeCaliRaven;
    basketofeggs:    SantiagoDeCaliRaven;
    wshoes:          Armorring;
    goldingot:       SantiagoDeCaliRaven;
    pmaceofthedead:  SantiagoDeCaliRaven;
    fsword:          SantiagoDeCaliRaven;
    fclaw:           SantiagoDeCaliRaven;
    elixirfires:     Armorring;
    bowofthedead:    SantiagoDeCaliRaven;
    elixirint1:      SantiagoDeCaliRaven;
    bronzeingot:     SantiagoDeCaliRaven;
    maceofthedead:   SantiagoDeCaliRaven;
    elixirdex1:      SantiagoDeCaliRaven;
    swordofthedead:  SantiagoDeCaliRaven;
    ornamentstaff:   SantiagoDeCaliRaven;
    froststaff:      SantiagoDeCaliRaven;
    gstaff:          SantiagoDeCaliRaven;
    orbg:            Armorring;
    carrotsword:     SantiagoDeCaliRaven;
    stealthcape:     SantiagoDeCaliRaven;
    elixirint2:      SantiagoDeCaliRaven;
    wingedboots:     SantiagoDeCaliRaven;
    firebow:         SantiagoDeCaliRaven;
    supercomputer:   SantiagoDeCaliRaven;
    wblade:          SantiagoDeCaliRaven;
    slimestaff:      SantiagoDeCaliRaven;
    pickaxe:         SantiagoDeCaliRaven;
    merry:           SantiagoDeCaliRaven;
    candycanesword:  SantiagoDeCaliRaven;
    frostbow:        SantiagoDeCaliRaven;
    dartgun:         SantiagoDeCaliRaven;
    snowflakes:      SantiagoDeCaliRaven;
    elixirpnres:     Armorring;
    elixirvit1:      SantiagoDeCaliRaven;
    elixirvit2:      SantiagoDeCaliRaven;
    wattire:         Armorring;
    staffofthedead:  SantiagoDeCaliRaven;
    xbox:            SantiagoDeCaliRaven;
    elixirdex2:      SantiagoDeCaliRaven;
    elixirstr1:      SantiagoDeCaliRaven;
    heartwood:       SantiagoDeCaliRaven;
    fireblade:       SantiagoDeCaliRaven;
    armorring:       Armorring;
    lbelt:           Armorring;
    charmer:         SantiagoDeCaliRaven;
    cake:            SantiagoDeCaliRaven;
    stinger:         Armorring;
    spearofthedead:  SantiagoDeCaliRaven;
    firestaff:       SantiagoDeCaliRaven;
}

export interface Armorring {
    items: Array<Array<number | string>>;
    quest: Quest;
    cost:  number;
}

export enum Quest {
    Mcollector = "mcollector",
    Witch = "witch",
}

export interface SantiagoDeCaliRaven {
    items: Array<Array<number | string>>;
    cost:  number;
}

export interface Docs {
    images:     Images;
    functions:  string[];
    tasks:      { [key: string]: string };
    references: Array<string[]>;
    rewards:    Rewards;
    documented: string[];
    javascript: Array<string[]>;
    guide:      Array<Array<Array<Array<Array<string[]> | string>> | string>>;
    tutorial:   Tutorial[];
}

export interface Images {
    newyear_tree:      PurpleBank;
    upgrade:           PurpleBank;
    topleft_character: PurpleBank;
    character_button:  PurpleBank;
    cue:               PurpleBank;
    topleft_monster:   PurpleBank;
    bank:              PurpleBank;
}

export interface PurpleBank {
    url:    string;
    width:  number;
    height: number;
}

export interface Rewards {
    c0: Array<Array<number | string>>;
}

export interface Tutorial {
    tasks: string[];
    key:   string;
    title: string;
}

export interface Drops {
    f1:                           Array<Array<number | string>>;
    abtesting:                    Array<Array<number | string>>;
    quiver:                       Array<Array<number | string>>;
    gold:                         Gold;
    candy1v2:                     Array<Array<number | string>>;
    candy1v3:                     Array<Array<number | string>>;
    candypop:                     Array<Array<number | string>>;
    skins:                        Skins;
    gem1_old:                     Array<Array<number | string>>;
    glitch:                       Array<Array<number | string>>;
    gift1:                        Array<Array<number | string>>;
    gift0:                        Array<Array<number | string>>;
    candy0v3:                     Array<Array<number | string>>;
    candy0v2:                     Array<Array<number | string>>;
    abtesting_loser:              Array<Array<number | string>>;
    lightmage:                    Array<Array<number | string>>;
    basketofeggs:                 Array<Array<number | string>>;
    troll:                        Array<Array<number | string>>;
    armorbox:                     Array<Array<number | string>>;
    xN:                           Array<Array<number | string>>;
    eastereggs:                   Array<Array<number | string>>;
    greenenvelope:                Array<Array<number | string>>;
    seashell:                     Array<Array<number | string>>;
    mistletoe:                    Array<Array<number | string>>;
    ornament:                     Array<Array<number | string>>;
    statring:                     Array<Array<number | string>>;
    maps:                         DropsMaps;
    m1:                           Array<Array<number | string>>;
    redenvelopev4:                Array<Array<number | string>>;
    gemfragment:                  Array<Array<number | string>>;
    candy0:                       Array<Array<number | string>>;
    test:                         Array<Array<number | string>>;
    armorx:                       Array<Array<number | string>>;
    cosmo3:                       Array<Array<number | string>>;
    cosmo2:                       Array<Array<number | string>>;
    lglitch:                      Array<Array<number | string>>;
    monsters:                     { [key: string]: Array<Array<number | string>> };
    m2:                           Array<Array<number | string>>;
    candy1:                       Array<Array<number | string>>;
    bugbountybox:                 Array<Array<number | string>>;
    mysterybox:                   Array<Array<number | string>>;
    goldenegg:                    Array<Array<number | string>>;
    basicelixir:                  Array<Array<number | string>>;
    gem1:                         Array<Array<number | string>>;
    cosmo1:                       Array<Array<number | string>>;
    redenvelopev2_shouldhavebeen: Array<Array<number | string>>;
    cosmo0:                       Array<Array<number | string>>;
    redenvelopev2:                Array<Array<number | string>>;
    redenvelopev3:                Array<Array<number | string>>;
    candycane:                    Array<Array<number | string>>;
    statamulet:                   Array<Array<number | string>>;
    lostearring0:                 Array<Array<number | string>>;
    redenvelope:                  Array<Array<number | string>>;
    gem0:                         Array<Array<number | string>>;
    statbelt:                     Array<Array<number | string>>;
    weaponbox:                    Array<Array<number | string>>;
    leather:                      Array<Array<number | string>>;
    lostearring1:                 Array<Array<number | string>>;
    lostearring2:                 Array<Array<number | string>>;
    lostearring3:                 Array<Array<number | string>>;
    lostearring4:                 Array<Array<number | string>>;
    xbox:                         Array<Array<number | string>>;
    konami:                       Array<Array<number | string>>;
    jewellerybox:                 Array<Array<number | string>>;
    apologybox:                   Array<Array<number | string>>;
    weaponofthedead:              Array<Array<number | string>>;
    thrash:                       Array<Array<number | string>>;
    "5bucks":                     Array<Array<number | string>>;
}

export interface Gold {
    random: number;
    x10:    number;
    base:   number;
    x50:    number;
}

export interface DropsMaps {
    winterland:    Array<Array<number | string>>;
    global:        any[];
    halloween:     Array<Array<number | string>>;
    mansion:       Array<Array<number | string>>;
    winter_cave:   Array<Array<number | string>>;
    arena:         Array<Array<number | string>>;
    maintest:      Array<Array<number | string>>;
    cave:          Array<Array<number | string>>;
    spookytown:    Array<Array<number | string>>;
    global_static: any[];
    main:          Array<Array<number | string>>;
}

export interface Skins {
    bronze: any[];
    silver: string[];
    gold:   any[];
    normal: any[];
}

export interface Emotions {
    drop_egg:      DropEgg;
    hearts_single: DropEgg;
}

export interface DropEgg {
    fx:       string;
    cooldown: number;
}

export interface Events {
    icegolem:  CrabxxClass;
    abtesting: CrabxxClass;
    franky:    CrabxxClass;
    crabxx:    CrabxxClass;
    goobrawl:  CrabxxClass;
}

export interface CrabxxClass {
    duration: number;
    join:     boolean;
    daily:    boolean;
}

export interface Games {
    wheel: Wheel;
    tarot: Tarot;
    slots: GamesSlots;
    dice:  unknown;
}

export interface GamesSlots {
    glyphs: string[];
    gold:   number;
}

export interface Tarot {
    cards: string[];
    hours: number;
    npc:   string;
}

export interface Wheel {
    gold:   number;
    slices: Array<Array<number | string>>;
}

export interface Imagesets {
    skills:  Custom;
    custom:  Custom;
    pack_20: Custom;
    pack_1a: Custom;
}

export interface Custom {
    load?:   boolean;
    rows:    number;
    file:    string;
    columns: number;
    size?:   SizeEnum | number;
    matrix?: Array<Array<null | string>>;
    type?:   string;
    skip?:   number;
    rskip?:  boolean;
}

export enum SizeEnum {
    Large = "large",
    Normal = "normal",
    Small = "small",
    Xsmall = "xsmall",
    Xxsmall = "xxsmall",
}

export enum OldRole {
    Mage = "mage",
    Merchant = "merchant",
    Paladin = "paladin",
    Priest = "priest",
    Ranger = "ranger",
    Rogue = "rogue",
    Warrior = "warrior",
}

export interface GMaps {
    winterland:       MapsWinterland;
    d_b1:             DB1;
    winter_inn:       WinterInn;
    mansion:          Mansion;
    d2:               D2;
    batcave:          Batcave;
    winter_instance:  Arena;
    resort:           Resort;
    d_a2:             DA1;
    winter_cove:      Arena;
    main:             Main;
    resort_e:         Cyberland;
    dungeon0:         Dungeon0;
    cgallery:         Arena;
    hut:              Cave;
    d_a1:             DA1;
    bank:             BankClass;
    tavern:           Tavern;
    ship0:            Cave;
    tunnel:           Tunnel;
    level2e:          Level2EClass;
    d_g:              DA1;
    d_e:              DE;
    abtesting:        DuellandClass;
    halloween:        Halloween;
    old_bank:         Batcave;
    level1:           Cyberland;
    level2:           Level2;
    level3:           Level2EClass;
    level4:           Level2EClass;
    cyberland:        Cyberland;
    old_main:         OldMain;
    crypt:            Crypt;
    cave:             Cave;
    original_main:    OriginalMain;
    duelland:         DuellandClass;
    spookytown:       Spookytown;
    test:             Test;
    bank_u:           BankU;
    shellsisland:     Shellsisland;
    goobrawl:         Goobrawl;
    level2s:          Cyberland;
    level2w:          Level2EClass;
    mtunnel:          Cyberland;
    level2n:          Cyberland;
    bank_b:           BankB;
    winter_cave:      WinterCave;
    arena:            Arena;
    desertland:       Desertland;
    winter_inn_rooms: DuellandClass;
    jail:             Jail;
    tomb:             Tomb;
    woffice:          Woffice;
}

export interface DuellandClass {
    pvp?:       boolean;
    code?:      string;
    on_death?:  Array<number | string>;
    npcs:       any[];
    key:        string;
    event?:     string;
    name:       string;
    lux:        number;
    instance?:  boolean;
    doors:      Array<Array<number | string>>;
    spawns:     Array<number[]>;
    monsters:   any[];
    data:       PurpleData;
    items:      unknown;
    merchants:  any[];
    ref:        unknown;
    loss?:      boolean;
    irregular?: boolean;
    drop_norm?: number;
    quirks?:    any[];
    unlist?:    boolean;
}

export interface PurpleData {
    min_x:       number;
    min_y:       number;
    y_lines:     Array<number[]>;
    x_lines:     Array<number[]>;
    groups?:     Array<Array<Array<number | null>>>;
    max_x:       number;
    max_y:       number;
    points?:     { [key: string]: number[] };
    rectangles?: { [key: string]: number[] };
    lights?:     Array<number[]>;
    polygons?:   { [key: string]: Array<number[]> };
    nights?:     Array<Array<number | null>>;
}

export interface Arena {
    pvp?:       boolean;
    on_death?:  Array<number | string>;
    npcs:       any[];
    key:        string;
    name:       string;
    lux:        number;
    drop_norm?: number;
    safe_pvp?:  boolean;
    doors:      Array<Array<number | string>>;
    spawns:     Array<number[]>;
    monsters:   OldMonsterElement[];
    data:       PurpleData;
    items:      unknown;
    merchants:  any[];
    ref:        unknown;
    no_bounds?: boolean;
    instance?:  boolean;
    quirks?:    any[];
    on_exit?:   Array<number | string>;
}

export interface OldMonsterElement {
    count:    number;
    boundary: number[];
    type:     string;
    polygon?: Array<number[]>;
    roam?:    boolean;
    grow?:    boolean;
    special?: boolean;
}

export interface BankClass {
    safe:      boolean;
    npcs:      PurpleNpc[];
    key:       string;
    name:      string;
    lux:       number;
    mount:     boolean;
    quirks:    Array<Array<number | string>>;
    doors:     Array<Array<number | string>>;
    on_exit:   Array<number | string>;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       { [key: string]: HargeisaCottonRat };
}

export interface PurpleNpc {
    position: number[];
    id:       string;
}

export interface HargeisaCottonRat {
    x:   number;
    y:   number;
    map: string;
    in:  string;
    id?: string;
}

export interface BankB {
    safe:      boolean;
    npcs:      PurpleNpc[];
    key:       string;
    name:      string;
    lux:       number;
    mount:     boolean;
    quirks:    any[];
    doors:     Array<Array<number | string>>;
    on_exit:   Array<number | string>;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       { [key: string]: HargeisaCottonRat };
}

export interface BankU {
    safe:      boolean;
    npcs:      any[];
    key:       string;
    name:      string;
    lux:       number;
    mount:     boolean;
    quirks:    any[];
    doors:     Array<Array<number | string>>;
    on_exit:   Array<number | string>;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface Batcave {
    ignore:     boolean;
    npcs:       PurpleNpc[];
    name:       string;
    key:        string;
    doors:      Array<Array<number | string>>;
    spawns:     Array<number[]>;
    drop_norm?: number;
    monsters:   OldMonsterElement[];
    quirks?:    Array<Array<number | string>>;
    mount?:     boolean;
}

export interface Cave {
    npcs:       any[];
    drop_norm?: number;
    quirks?:    Array<Array<number | string>>;
    name:       string;
    key:        string;
    doors:      Array<Array<number | string>>;
    lux?:       number;
    spawns:     Array<number[]>;
    monsters:   CaveMonster[];
    data:       PurpleData;
    items:      unknown;
    merchants:  any[];
    ref:        unknown;
    safe?:      boolean;
    outside?:   boolean;
    event?:     string;
}

export interface CaveMonster {
    count:       number;
    boundary?:   number[];
    type:        string;
    boundaries?: Array<Array<number | string>>;
    stype?:      string;
    grow?:       boolean;
}

export interface Crypt {
    npcs:      any[];
    instance:  boolean;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    on_death:  Array<number | string>;
    on_exit:   Array<number | string>;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface Cyberland {
    npcs:         any[];
    drop_norm:    number;
    quirks:       Array<Array<number | string>>;
    name:         string;
    key:          string;
    doors:        Array<Array<number | string>>;
    lux:          number;
    spawns:       Array<number[]>;
    monsters:     OldMonsterElement[];
    irregular?:   boolean;
    data:         PurpleData;
    items:        unknown;
    merchants:    any[];
    ref:          unknown;
    small_steps?: boolean;
    unlist?:      boolean;
    animatables?: CyberlandAnimatables;
}

export interface CyberlandAnimatables {
    the_lever: The;
}

export interface The {
    x:        number;
    y:        number;
    position: string;
}

export interface D2 {
    npcs:     any[];
    ignore:   boolean;
    quirks:   any[];
    name:     string;
    key:      string;
    doors:    Array<Array<number | string>>;
    spawns:   Array<number[]>;
    monsters: D2Monster[];
}

export interface D2Monster {
    count:       number;
    gatekeeper?: boolean;
    boundary:    number[];
    type:        string;
    rage?:       number[];
    special?:    boolean;
}

export interface DA1 {
    npcs:      any[];
    quirks:    Array<Array<number | string>>;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    world:     World;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export enum World {
    CstandTexture = "cstand_texture",
    Custom = "custom",
    Dungeon = "dungeon",
    Empty = "",
    FstandTexture = "fstand_texture",
    Licht = "licht",
    Outside = "outside",
    Pack1A = "pack_1a",
    Skills = "skills",
    Stand0Texture = "stand0_texture",
    StandgTexture = "standg_texture",
    Stands = "stands",
    StandxTexture = "standx_texture",
    Stone = "stone",
    WstandTexture = "wstand_texture",
}

export interface DB1 {
    npcs:      any[];
    quirks:    Array<Array<number | string>>;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    world:     World;
    spawns:    Array<number[]>;
    monsters:  any[];
    traps:     DB1Trap[];
    data:      DB1Data;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface DB1Data {
    x_lines:    Array<number[]>;
    min_x:      number;
    min_y:      number;
    y_lines:    Array<number[]>;
    points:     { [key: string]: number[] };
    max_x:      number;
    groups:     Array<Array<number[]>>;
    rectangles: { [key: string]: number[] };
    polygons:   Polygons;
    max_y:      number;
}

export interface Polygons {
    VmtUh: Array<number[]>;
}

export interface DB1Trap {
    type:    string;
    polygon: Array<number[]>;
}

export interface DE {
    fx:        string;
    safe:      boolean;
    npcs:      PurpleNpc[];
    weather:   string;
    key:       string;
    world:     World;
    name:      string;
    quirks:    any[];
    doors:     Array<Array<number | string>>;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       DERef;
}

export interface DERef {
    transporter: HargeisaCottonRat;
}

export interface Desertland {
    freeze_multiplier: number;
    npcs:              PurpleNpc[];
    outside:           boolean;
    name:              string;
    key:               string;
    doors:             Array<Array<number | string>>;
    spawns:            Array<number[]>;
    drop_norm:         number;
    burn_multiplier:   number;
    monsters:          OldMonsterElement[];
    data:              PurpleData;
    items:             unknown;
    merchants:         any[];
    ref:               DesertlandRef;
}

export interface DesertlandRef {
    transporter: HargeisaCottonRat;
    locksmith:   HargeisaCottonRat;
}

export interface Dungeon0 {
    pvp:       boolean;
    on_death:  Array<number | string>;
    npcs:      any[];
    no_bounds: boolean;
    key:       string;
    name:      string;
    lux:       number;
    instance:  boolean;
    doors:     any[];
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      Dungeon0Data;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface Dungeon0Data {
    min_x: number;
    min_y: number;
    max_x: number;
    max_y: number;
}

export interface Goobrawl {
    npcs:      PurpleNpc[];
    outside:   boolean;
    code:      string;
    name:      string;
    key:       string;
    doors:     any[];
    on_death:  Array<number | string>;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    event:     string;
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       DERef;
}

export interface Halloween {
    npcs:      HalloweenNpc[];
    drop_norm: number;
    outside:   boolean;
    quirks:    Array<Array<number | string>>;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     HalloweenItems;
    merchants: null[];
    ref:       HalloweenRef;
}

export interface HalloweenItems {
    hpot0:       HargeisaCottonRat[];
    mpot0:       null[];
    hpot1:       null[];
    mpot1:       null[];
    elixirluck?: null[];
}

export interface HalloweenNpc {
    position: number[];
    name?:    string;
    id:       string;
}

export interface HalloweenRef {
    transporter: HargeisaCottonRat;
    witch:       HargeisaCottonRat;
    citizen11:   HargeisaCottonRat;
    citizen12:   HargeisaCottonRat;
    citizen13:   HargeisaCottonRat;
}

export interface Jail {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    Array<Array<QuirkEnum | number>>;
    name:      string;
    key:       string;
    doors:     any[];
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    irregular: boolean;
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       JailRef;
}

export enum QuirkEnum {
    HotdamnThisOneIsLockedToo = "Hotdamn. This one is locked too...",
    Locked = "Locked",
    Log = "log",
}

export interface JailRef {
    jailer: HargeisaCottonRat;
}

export interface Level2 {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    any[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  any[];
    unlist:    boolean;
    data:      PurpleData;
    items:     Level2Items;
    merchants: null[];
    ref:       unknown;
}

export interface Level2Items {
    licence:  HargeisaCottonRat[];
    scroll3:  null[];
    cscroll3: null[];
}

export interface Level2EClass {
    npcs:      any[];
    drop_norm: number;
    quirks:    any[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<Array<number | number>>;
    monsters:  OldMonsterElement[];
    unlist:    boolean;
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface Main {
    on_death:    Array<number | string>;
    npcs:        MainNpc[];
    key:         string;
    animatables: MainAnimatables;
    traps:       MainTrap[];
    zones:       Zone[];
    name:        string;
    drop_norm:   number;
    outside:     boolean;
    quirks:      Array<Array<number | string>>;
    doors:       Array<Array<number | string>>;
    on_exit:     Array<number | string>;
    spawns:      Array<number[]>;
    ref:         MainRef;
    monsters:    CaveMonster[];
    data:        PurpleData;
    items:       { [key: string]: null[] };
    merchants:   null[];
}

export interface MainAnimatables {
    the_door: The;
}

export interface MainNpc {
    position?:  number[];
    id:         string;
    name?:      string;
    positions?: Array<number[]>;
    boundary?:  number[];
}

export interface MainRef {
    cx:            number[];
    u_mid:         number[];
    c_mid:         number[];
    newupgrade:    HargeisaCottonRat;
    exchange:      HargeisaCottonRat;
    scrolls:       HargeisaCottonRat;
    lotterylady:   HargeisaCottonRat;
    fisherman:     HargeisaCottonRat;
    fancypots:     HargeisaCottonRat;
    basics:        HargeisaCottonRat;
    premium:       HargeisaCottonRat;
    transporter:   HargeisaCottonRat;
    standmerchant: HargeisaCottonRat;
    appearance:    HargeisaCottonRat;
    craftsman:     HargeisaCottonRat;
    pete:          HargeisaCottonRat;
    citizen0:      HargeisaCottonRat;
    citizen2:      HargeisaCottonRat;
    citizen3:      HargeisaCottonRat;
    citizen4:      HargeisaCottonRat;
    antip2w:       HargeisaCottonRat;
    friendtokens:  HargeisaCottonRat;
    funtokens:     HargeisaCottonRat;
    bean:          HargeisaCottonRat;
    secondhands:   HargeisaCottonRat;
    pvptokens:     HargeisaCottonRat;
    monsterhunter: HargeisaCottonRat;
    mcollector:    HargeisaCottonRat;
}

export interface MainTrap {
    position: number[];
    type:     string;
}

export interface Zone {
    drop:    string;
    type:    string;
    polygon: Array<number[]>;
}

export interface Mansion {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    Array<Array<QuirkEnum | number>>;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       MansionRef;
}

export interface MansionRef {
    pwincess: HargeisaCottonRat;
}

export interface OldMain {
    ignore:   boolean;
    name:     string;
    npcs:     HalloweenNpc[];
    key:      string;
    doors:    any[];
    spawns:   Array<number[]>;
    monsters: OldMainMonster[];
}

export interface OldMainMonster {
    count:    number;
    position: number[];
    radius:   number;
    type:     string;
}

export interface OriginalMain {
    pvp:          boolean;
    on_death:     Array<number | string>;
    old_monsters: OldMonsterElement[];
    npcs:         MainNpc[];
    key:          string;
    name:         string;
    instance:     boolean;
    ignore:       boolean;
    drop_norm:    number;
    quirks:       Array<Array<number | string>>;
    doors:        Array<Array<number | string>>;
    spawns:       Array<number[]>;
}

export interface Resort {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    any[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  any[];
    irregular: boolean;
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       ResortRef;
}

export interface ResortRef {
    holo:  HargeisaCottonRat;
    holo0: HargeisaCottonRat;
    holo1: HargeisaCottonRat;
    holo2: HargeisaCottonRat;
    holo3: HargeisaCottonRat;
    holo4: HargeisaCottonRat;
    holo5: HargeisaCottonRat;
}

export interface Shellsisland {
    npcs:      PurpleNpc[];
    drop_norm: number;
    outside:   boolean;
    doors:     any[];
    name:      string;
    key:       string;
    instance:  boolean;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       ShellsislandRef;
}

export interface ShellsislandRef {
    wizardrepeater: HargeisaCottonRat;
}

export interface Spookytown {
    npcs:      SpookytownNpc[];
    key:       string;
    name:      string;
    lux:       number;
    drop_norm: number;
    outside:   boolean;
    quirks:    Array<Array<number | string>>;
    doors:     Array<Array<number | string>>;
    spawns:    Array<number[]>;
    ref:       SpookytownRef;
    monsters:  D2Monster[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
}

export interface SpookytownNpc {
    position: number[];
    boundary: number[];
    id:       string;
}

export interface SpookytownRef {
    poof:      HargeisaCottonRat;
    citizen15: HargeisaCottonRat;
    citizen14: HargeisaCottonRat;
}

export interface Tavern {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    Array<Array<number | string>>;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  any[];
    machines:  Machine[];
    data:      PurpleData;
    items:     TavernItems;
    merchants: null[];
    ref:       TavernRef;
}

export interface TavernItems {
    whiskey:  HargeisaCottonRat[];
    wine:     null[];
    ale:      null[];
    pico:     null[];
    blue:     null[];
    espresso: null[];
    xshot:    null[];
}

export interface Machine {
    x:          number;
    y:          number;
    set:        World;
    frames:     Array<number[]>;
    subframes?: Array<number[]>;
    type:       string;
}

export interface TavernRef {
    bouncer: HargeisaCottonRat;
}

export interface Test {
    npcs:      MainNpc[];
    irregular: boolean;
    no_bounds: boolean;
    name:      string;
    key:       string;
    doors:     any[];
    spawns:    Array<number[]>;
    monsters:  any[];
    day:       boolean;
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       DERef;
}

export interface Tomb {
    key:       string;
    name:      string;
    lux:       number;
    npcs:      any[];
    instance:  boolean;
    doors:     Array<Array<number | string>>;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface Tunnel {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    Array<Array<number | string>>;
    zones:     Zone[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       TunnelRef;
}

export interface TunnelRef {
    gemmerchant: HargeisaCottonRat;
}

export interface WinterCave {
    npcs:      any[];
    drop_norm: number;
    quirks:    any[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  OldMonsterElement[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       unknown;
}

export interface WinterInn {
    npcs:      PurpleNpc[];
    drop_norm: number;
    quirks:    any[];
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    monsters:  any[];
    data:      PurpleData;
    items:     HalloweenItems;
    merchants: null[];
    ref:       WinterInnRef;
}

export interface WinterInnRef {
    citizen1: HargeisaCottonRat;
    citizen5: HargeisaCottonRat;
    citizen6: HargeisaCottonRat;
}

export interface MapsWinterland {
    npcs:              PurpleNpc[];
    key:               string;
    freeze_multiplier: number;
    name:              string;
    lux:               number;
    burn_multiplier:   number;
    drop_norm:         number;
    outside:           boolean;
    quirks:            Array<Array<number | string>>;
    doors:             Array<Array<number | string>>;
    spawns:            Array<number[]>;
    monsters:          OldMonsterElement[];
    data:              PurpleData;
    items:             unknown;
    merchants:         any[];
    ref:               WinterlandRef;
}

export interface WinterlandRef {
    leathermerchant: HargeisaCottonRat;
    transporter:     HargeisaCottonRat;
    guard:           HargeisaCottonRat;
    citizen7:        HargeisaCottonRat;
    citizen8:        HargeisaCottonRat;
    citizen9:        HargeisaCottonRat;
    citizen10:       HargeisaCottonRat;
}

export interface Woffice {
    npcs:      PurpleNpc[];
    zones:     Zone[];
    safe:      boolean;
    name:      string;
    key:       string;
    doors:     Array<Array<number | string>>;
    lux:       number;
    spawns:    Array<number[]>;
    drop_norm: number;
    monsters:  D2Monster[];
    data:      PurpleData;
    items:     unknown;
    merchants: any[];
    ref:       WofficeRef;
}

export interface WofficeRef {
    lostandfound: HargeisaCottonRat;
    wnpc:         HargeisaCottonRat;
}

export interface Hand {
    name:  string;
    level: number;
}

export enum Hit {
    ExplodeC = "explode_c",
    ExplodeP = "explode_p",
}

export interface Multipliers {
    buy_to_sell:           number;
    shells_to_gold:        number;
    extra_shells:          number;
    lostandfound_mult:     number;
    secondhands_mult:      number;
    secondhands_cash_mult: number;
}

export interface Npcs {
    items22:         KanazawaIvoryBushCoral;
    citizen12:       UfaBat;
    citizen13:       UfaBat;
    citizen10:       UfaBat;
    citizen11:       UfaBat;
    citizen14:       UfaBat;
    citizen15:       UfaBat;
    antip2w:         Antip2W;
    jailer:          KanazawaIvoryBushCoral;
    newupgrade:      KanazawaIvoryBushCoral;
    goldnpc:         KanazawaIvoryBushCoral;
    premium:         Armors;
    bean:            Bean;
    wnpc:            KanazawaIvoryBushCoral;
    compound:        Compound;
    basics:          Armors;
    fisherman:       KanazawaIvoryBushCoral;
    items38:         KanazawaIvoryBushCoral;
    pvp:             Bean;
    lostandfound:    KanazawaIvoryBushCoral;
    thief:           Fancypots;
    leathermerchant: KanazawaIvoryBushCoral;
    ornaments:       KanazawaIvoryBushCoral;
    shellsguy:       KanazawaIvoryBushCoral;
    funtokens:       FriendtokensClass;
    pete:            KanazawaIvoryBushCoral;
    citizen9:        UfaBat;
    citizen0:        UfaBat;
    citizen1:        UfaBat;
    citizen2:        UfaBat;
    citizen3:        UfaBat;
    citizen4:        UfaBat;
    citizen5:        UfaBat;
    citizen6:        UfaBat;
    citizen7:        UfaBat;
    weapons:         Armors;
    scrolls:         KanazawaIvoryBushCoral;
    exchange:        Exchange;
    holo1:           UfaBat;
    holo0:           UfaBat;
    holo3:           UfaBat;
    holo2:           UfaBat;
    holo5:           UfaBat;
    holo4:           UfaBat;
    witch:           KanazawaIvoryBushCoral;
    santa:           KanazawaIvoryBushCoral;
    princess:        UfaBat;
    pwincess:        KanazawaIvoryBushCoral;
    lichteaser:      KanazawaIvoryBushCoral;
    standmerchant:   KanazawaIvoryBushCoral;
    craftsman:       KanazawaIvoryBushCoral;
    tbartender:      KanazawaIvoryBushCoral;
    newyear_tree:    KanazawaIvoryBushCoral;
    mistletoe:       KanazawaIvoryBushCoral;
    items14:         KanazawaIvoryBushCoral;
    firstc:          Compound;
    wbartender:      KanazawaIvoryBushCoral;
    wizardrepeater:  KanazawaIvoryBushCoral;
    guard:           KanazawaIvoryBushCoral;
    items18:         KanazawaIvoryBushCoral;
    items19:         KanazawaIvoryBushCoral;
    items10:         KanazawaIvoryBushCoral;
    items11:         KanazawaIvoryBushCoral;
    items12:         KanazawaIvoryBushCoral;
    items13:         KanazawaIvoryBushCoral;
    pots:            Armors;
    items15:         KanazawaIvoryBushCoral;
    items16:         KanazawaIvoryBushCoral;
    items17:         KanazawaIvoryBushCoral;
    armors:          Armors;
    pvptokens:       FriendtokensClass;
    gemmerchant:     KanazawaIvoryBushCoral;
    rewards:         KanazawaIvoryBushCoral;
    items46:         KanazawaIvoryBushCoral;
    holo:            KanazawaIvoryBushCoral;
    items24:         KanazawaIvoryBushCoral;
    items27:         KanazawaIvoryBushCoral;
    items26:         KanazawaIvoryBushCoral;
    items21:         KanazawaIvoryBushCoral;
    items20:         KanazawaIvoryBushCoral;
    items23:         KanazawaIvoryBushCoral;
    monsterhunter:   KanazawaIvoryBushCoral;
    items29:         KanazawaIvoryBushCoral;
    items28:         KanazawaIvoryBushCoral;
    tavern:          KanazawaIvoryBushCoral;
    pvpblocker:      KanazawaIvoryBushCoral;
    appearance:      KanazawaIvoryBushCoral;
    friendtokens:    FriendtokensClass;
    locksmith:       KanazawaIvoryBushCoral;
    items32:         KanazawaIvoryBushCoral;
    items33:         KanazawaIvoryBushCoral;
    items30:         KanazawaIvoryBushCoral;
    items31:         KanazawaIvoryBushCoral;
    items36:         KanazawaIvoryBushCoral;
    items37:         KanazawaIvoryBushCoral;
    items34:         KanazawaIvoryBushCoral;
    items35:         KanazawaIvoryBushCoral;
    fancypots:       Fancypots;
    items39:         KanazawaIvoryBushCoral;
    ship:            KanazawaIvoryBushCoral;
    shrine:          KanazawaIvoryBushCoral;
    citizen8:        UfaBat;
    secondhands:     KanazawaIvoryBushCoral;
    transporter:     Fancypots;
    items47:         KanazawaIvoryBushCoral;
    items25:         KanazawaIvoryBushCoral;
    items45:         KanazawaIvoryBushCoral;
    items44:         KanazawaIvoryBushCoral;
    items43:         KanazawaIvoryBushCoral;
    items42:         KanazawaIvoryBushCoral;
    items41:         KanazawaIvoryBushCoral;
    items40:         KanazawaIvoryBushCoral;
    bouncer:         Bouncer;
    items2:          KanazawaIvoryBushCoral;
    items3:          KanazawaIvoryBushCoral;
    items0:          KanazawaIvoryBushCoral;
    items1:          KanazawaIvoryBushCoral;
    items6:          KanazawaIvoryBushCoral;
    items7:          KanazawaIvoryBushCoral;
    items4:          KanazawaIvoryBushCoral;
    items5:          KanazawaIvoryBushCoral;
    lotterylady:     KanazawaIvoryBushCoral;
    items8:          KanazawaIvoryBushCoral;
    items9:          KanazawaIvoryBushCoral;
    mcollector:      KanazawaIvoryBushCoral;
}

export interface Antip2W {
    says:                 string;
    side_interaction:     SideInteraction;
    skin:                 string;
    id:                   string;
    name:                 string;
    items:                string[];
    old_role:             OldRole;
    old_side_interaction: SideInteraction;
    role:                 string;
    old_items:            Array<null | string>;
    type:                 FluffyType;
}

export interface SideInteraction {
    auto:    boolean;
    message: string;
    skin:    string;
}

export enum FluffyType {
    Fullstatic = "fullstatic",
    Static = "static",
}

export interface KanazawaIvoryBushCoral {
    says?:             string;
    name?:             string;
    color?:            string;
    quest?:            string;
    role:              string;
    skin:              string;
    aspeed?:           string;
    id:                string;
    type?:             FluffyType;
    direction?:        number;
    pack?:             string;
    cx?:               Looks;
    token?:            string;
    atype?:            string;
    items?:            Array<null | string>;
    side_interaction?: SideInteraction;
    interval?:         number;
}

export interface Armors {
    says:       string;
    items:      Array<null | string>;
    atype:      string;
    role:       OldRole;
    skin:       string;
    id:         string;
    name?:      string;
    stopframe?: number;
    old_role?:  string;
    ignore?:    boolean;
}

export interface Bean {
    moving?: boolean;
    role:    string;
    name:    string;
    allow:   boolean;
    skin:    string;
    type:    string;
    hp:      number;
    speed:   number;
    id:      string;
}

export interface Bouncer {
    interaction: string[];
    says:        string[];
    name:        string;
    level:       number;
    role:        string;
    skin:        string;
    type:        FluffyType;
    id:          string;
}

export interface UfaBat {
    says:        string[];
    hp:          number;
    skin:        string;
    speed:       number;
    id:          string;
    interaction: string[];
    name:        string;
    level:       number;
    delay:       number;
    role:        Role;
    aura?:       Aura;
    type:        TentacledType;
    steps?:      number;
    seek?:       string;
    heal?:       number;
}

export interface Aura {
    luck?: number;
    gold?: number;
}

export enum Role {
    Citizen = "citizen",
}

export enum TentacledType {
    Fullstatic = "fullstatic",
    Priest = "priest",
}

export interface Compound {
    type:  FluffyType;
    role:  string;
    id:    string;
    skin:  string;
    says?: string[];
}

export interface Exchange {
    id:   string;
    says: string;
    role: string;
    name: string;
    skin: string;
}

export interface Fancypots {
    says:              string;
    role:              string;
    name:              string;
    side_interaction?: SideInteraction;
    skin:              string;
    color:             string;
    items?:            Array<null | string>;
    atype?:            string;
    id:                string;
    type?:             FluffyType;
    places?:           Places;
}

export interface Places {
    winterland: number;
    desertland: number;
    test:       number;
    cyberland:  number;
    main:       number;
    d_e:        number;
}

export interface FriendtokensClass {
    says:             string;
    color:            string;
    side_interaction: SideInteraction;
    skin:             string;
    id:               string;
    name:             string;
    atype?:           string;
    token:            string;
    role:             string;
    stand:            World;
    aspeed:           string;
}

export interface Projectiles {
    garrow:        RiyadhFlyingFrog;
    burst:         GburstClass;
    pinky:         RiyadhFlyingFrog;
    gburst:        GburstClass;
    poisonarrow:   RiyadhFlyingFrog;
    crossbowarrow: RiyadhFlyingFrog;
    curse:         RiyadhFlyingFrog;
    mentalburst:   GburstClass;
    frostarrow:    RiyadhFlyingFrog;
    frostball:     RiyadhFlyingFrog;
    plight:        RiyadhFlyingFrog;
    acid:          Acid;
    pouch:         RiyadhFlyingFrog;
    firearrow:     RiyadhFlyingFrog;
    smash:         RiyadhFlyingFrog;
    stone:         RiyadhFlyingFrog;
    supershot:     RiyadhFlyingFrog;
    magic:         RiyadhFlyingFrog;
    mmagic:        RiyadhFlyingFrog;
    bigmagic:      RiyadhFlyingFrog;
    sburst:        GburstClass;
    purify:        ProjectilesPurify;
    stone_k:       RiyadhFlyingFrog;
    cupid:         RiyadhFlyingFrog;
    quickstab:     RiyadhFlyingFrog;
    partyheal:     ProjectilesPartyheal;
    snowball:      RiyadhFlyingFrog;
    magic_purple:  RiyadhFlyingFrog;
    arrow:         RiyadhFlyingFrog;
    pmagic:        RiyadhFlyingFrog;
    quickpunch:    RiyadhFlyingFrog;
    wandy:         RiyadhFlyingFrog;
    fireball:      RiyadhFlyingFrog;
    wmomentum:     RiyadhFlyingFrog;
    momentum:      RiyadhFlyingFrog;
    magic_divine:  RiyadhFlyingFrog;
}

export interface Acid {
    animation: string;
    speed:     number;
}

export interface RiyadhFlyingFrog {
    hit_animation: string;
    animation:     string;
    speed:         number;
    hit_text?:     string[];
    pure?:         boolean;
}

export interface GburstClass {
    hit_animation: string;
    instant:       boolean;
    ray:           string;
    kill_text?:    string[];
}

export interface ProjectilesPartyheal {
    hit_animation: string;
    instant:       boolean;
}

export interface ProjectilesPurify {
    hit_animation: string;
    instant:       boolean;
    hit_text:      string[];
}

export interface Sets {
    wanderers: Wanderers;
    wt3:       Wt3;
    wt4:       Wt3;
    vampires:  Vampires;
    easter:    Easter;
    fury:      Fury;
    mranger:   Mranger;
    mrogue:    Mrogue;
    mmage:     Mmage;
    holidays:  Holidays;
    tiger:     SetsTiger;
    mmerchant: Mmerchant;
    mpriest:   Mpriest;
    mwarrior:  Mwarrior;
    rugged:    Rugged;
    swift:     Swift;
    mpx:       Mpx;
    legends:   Legends;
}

export interface Easter {
    "1":         unknown;
    "2":         Purple2;
    "3":         The6_Class;
    "4":         unknown;
    "5":         The6_Class;
    "6":         The6_Class;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Purple2 {
    luck: number;
}

export interface The6_Class {
    vit: number;
}

export interface Fury {
    "1":   unknown;
    "2":   Fury2;
    "3":   Purple3;
    "4":   Fury4;
    name:  string;
    items: string[];
}

export interface Fury2 {
    str: number;
}

export interface Purple3 {
    dex: number;
}

export interface Fury4 {
    apiercing: number;
}

export interface Holidays {
    "1":         unknown;
    "2":         Purple3;
    "3":         The6_Class;
    "4":         Purple2;
    "5":         unknown;
    "6":         unknown;
    "7":         unknown;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Legends {
    "1":   unknown;
    "2":   unknown;
    "3":   The4_Class;
    "4":   The4_Class;
    name:  string;
    items: string[];
}

export interface The4_Class {
    for: number;
}

export interface Mmage {
    "1":         unknown;
    "2":         RequirementsClass;
    "3":         Mmage3;
    "4":         Mmage4;
    "5":         UpgradeClass;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface RequirementsClass {
    int: number;
}

export interface Mmage3 {
    int:   number;
    speed: number;
}

export interface Mmage4 {
    rpiercing: number;
}

export interface Mmerchant {
    "1":         unknown;
    "2":         The5_Class;
    "3":         Mmerchant3;
    "4":         Mmerchant4;
    "5":         The5_Class;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface The5_Class {
    courage:  number;
    pcourage: number;
    vit?:     number;
    mcourage: number;
    for?:     number;
}

export interface Mmerchant3 {
    speed: number;
    str:   number;
    vit:   number;
}

export interface Mmerchant4 {
    evasion: number;
}

export interface Mpriest {
    "1":         unknown;
    "2":         RequirementsClass;
    "3":         Mmage3;
    "4":         Mmage4;
    "5":         Purple5;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Purple5 {
    mp: number;
}

export interface Mpx {
    "1":   unknown;
    "2":   Purple5;
    "3":   Mpx3;
    items: string[];
    name:  string;
}

export interface Mpx3 {
    speed:     number;
    mp:        number;
    rpiercing: number;
}

export interface Mranger {
    "1":         unknown;
    "2":         Purple3;
    "3":         Mranger3;
    "4":         Fury4;
    "5":         Mranger5;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Mranger3 {
    dex:   number;
    speed: number;
}

export interface Mranger5 {
    resistance: number;
}

export interface Mrogue {
    "1":         unknown;
    "2":         Purple3;
    "3":         Mranger3;
    "4":         Fury4;
    "5":         UpgradeClass;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Mwarrior {
    "1":         unknown;
    "2":         Fury2;
    "3":         Mwarrior3;
    "4":         Fury4;
    "5":         UpgradeClass;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Mwarrior3 {
    speed: number;
    str:   number;
}

export interface Rugged {
    "1":         unknown;
    "2":         The3_Class;
    "3":         Rugged3;
    "4":         The4_Class;
    "5":         unknown;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface The3_Class {
    int: number;
    dex: number;
    str: number;
}

export interface Rugged3 {
    armor:      number;
    range:      number;
    resistance: number;
}

export interface Swift {
    "1":   unknown;
    "2":   Purple3;
    items: string[];
    name:  string;
}

export interface SetsTiger {
    "1":   unknown;
    "2":   The6_Class;
    "3":   The3_Class;
    "4":   unknown;
    name:  string;
    items: string[];
}

export interface Vampires {
    "1":   unknown;
    "2":   The6_Class;
    "3":   Vampires3;
    items: string[];
    name:  string;
}

export interface Vampires3 {
    lifesteal: number;
}

export interface Wanderers {
    "1":         unknown;
    "2":         Wanderers2;
    "3":         Purple5;
    "4":         Wanderers4;
    "5":         Purple2;
    name:        string;
    items:       string[];
    explanation: string;
}

export interface Wanderers2 {
    hp: number;
}

export interface Wanderers4 {
    gold: number;
}

export interface Wt3 {
    "1":   The4_Class;
    "2":   The4_Class;
    "3":   The4_Class;
    "4":   The4_Class;
    "5":   The4_Class;
    name:  string;
    items: string[];
}

export interface Skills {
    use_town:         PurpleAnger;
    fishing:          Ing;
    regen_hp:         Regen;
    gm:               MiscCondition;
    darkblessing:     The4_Fingers;
    move_up:          MiscCondition;
    snippet:          PureEval;
    dampening_aura:   SkillsCurseAura;
    phaseout:         CburstClass;
    alchemy:          Alchemy;
    partyheal:        SkillsPartyheal;
    "3shot":          Shot;
    taunt:            CburstClass;
    stomp:            Entangle;
    multi_freeze:     MiscCondition;
    stop:             Block;
    snowball:         CburstClass;
    warpstomp:        PurpleAnger;
    blink:            Blink;
    smash:            Mentalburst;
    shadowstrike:     Cleave;
    massproduction:   Blink;
    pure_eval:        PureEval;
    frostball:        Deepfreeze;
    cburst:           CburstClass;
    use_mp:           PurpleAnger;
    burst:            CburstClass;
    agitate:          Absorb;
    poisonarrow:      Poisonarrow;
    mentalburst:      Mentalburst;
    mcourage:         Blink;
    use_hp:           PurpleAnger;
    curse:            CburstClass;
    "5shot":          Shot;
    move_down:        MiscCondition;
    esc:              MiscCondition;
    power:            CburstClass;
    healing:          Block;
    multi_burn:       MiscCondition;
    selfheal:         Alchemy;
    throw:            Throw;
    invis:            Invis;
    cleave:           Cleave;
    self_healing:     PurpleAnger;
    "4fingers":       The4_Fingers;
    charm:            Charm;
    scare:            Blink;
    emotion:          Block;
    deepfreeze:       Deepfreeze;
    move_right:       MiscCondition;
    revive:           Absorb;
    mluck:            Charm;
    tangle:           Blink;
    zap:              Deepfreeze;
    charge:           Blink;
    move_left:        MiscCondition;
    interact:         MiscCondition;
    mlight:           MiscCondition;
    attack:           Attack;
    quickpunch:       Mentalburst;
    mining:           Ing;
    rspeed:           Absorb;
    heal:             Heal;
    stone:            Stone;
    warp:             Blink;
    xpower:           Blink;
    entangle:         Entangle;
    mshield:          CburstClass;
    huntersmark:      CburstClass;
    warcry:           Cleave;
    hardshell:        The4_Fingers;
    mtangle:          CburstClass;
    massproductionpp: Blink;
    weakness_aura:    SkillsCurseAura;
    toggle_inventory: MiscCondition;
    dash:             Blink;
    anger:            PurpleAnger;
    toggle_character: Block;
    piercingshot:     Shot;
    travel:           PurpleAnger;
    supershot:        Cleave;
    toggle_stats:     MiscCondition;
    toggle_run_code:  MiscCondition;
    regen_mp:         Regen;
    zapperzap:        ZapperzapClass;
    track:            Blink;
    absorb:           Absorb;
    toggle_code:      MiscCondition;
    portal:           PurpleAnger;
    open_snippet:     MiscCondition;
    stack:            Invis;
    curse_aura:       SkillsCurseAura;
    reflection:       Charm;
    energize:         Absorb;
    light:            Blink;
    purify:           ZapperzapClass;
    quickstab:        Mentalburst;
    magiport:         Blink;
    pcoat:            CburstClass;
    fireball:         Deepfreeze;
}

export interface Shot {
    wtype:               string[];
    multi?:              boolean;
    damage_type:         DamageType;
    name:                string;
    level:               number;
    cooldown_multiplier: number;
    explanation:         string;
    share:               string;
    damage_multiplier:   number;
    pierces_immunity:    boolean;
    mp:                  number;
    skin:                string;
    use_range:           boolean;
    type:                StickyType;
    class:               OldRole[];
    procs:               boolean;
    hostile:             boolean;
    apiercing?:          number;
    target?:             boolean;
}

export enum StickyType {
    Monster = "monster",
    Skill = "skill",
}

export interface The4_Fingers {
    explanation: string;
    cooldown:    number;
    skin:        string;
    duration:    number;
    class:       OldRole[];
    condition:   string;
    target?:     string;
    name:        string;
    level:       number;
    range?:      number;
    hostile?:    boolean;
    mp:          number;
    type:        StickyType;
    monsters?:   boolean;
}

export interface Absorb {
    range:       number;
    cooldown:    number;
    target?:     string;
    name:        string;
    skin:        string;
    explanation: string;
    level?:      number;
    type:        StickyType;
    class:       OldRole[];
    mp?:         number;
    hostile?:    boolean;
    duration?:   number;
    condition?:  string;
    consume?:    string;
}

export interface Alchemy {
    explanation:  string;
    output:       number;
    levels:       Array<number[]>;
    skin:         string;
    class:        OldRole[];
    party?:       boolean;
    name:         string;
    level?:       number;
    cooldown:     number;
    mp:           number;
    action:       string;
    variance?:    number;
    type:         StickyType;
    damage_type?: DamageType;
    projectile?:  string;
    heal?:        boolean;
}

export interface PurpleAnger {
    explanation: string;
    type:        string;
    name:        string;
    hostile?:    boolean;
    skin?:       string;
    cooldown?:   number;
}

export interface Attack {
    hostile:          boolean;
    name:             string;
    skin:             string;
    pierces_immunity: boolean;
    explanation:      string;
    projectile:       string;
    type:             string;
    use_range:        boolean;
    procs:            boolean;
    target:           boolean;
}

export interface Blink {
    name:           string;
    explanation:    string;
    cooldown:       number;
    mp:             number;
    skin:           string;
    type:           StickyType;
    class?:         OldRole[];
    duration?:      number;
    condition?:     string;
    set_speed?:     number;
    hostile?:       boolean;
    complementary?: string;
    level?:         number;
    slot?:          Array<string[]>;
    target?:        boolean;
    range?:         number;
}

export interface CburstClass {
    explanation:       string;
    cooldown:          number;
    damage_type?:      DamageType;
    skin?:             string;
    class?:            OldRole[];
    name:              string;
    ratio?:            number;
    target?:           boolean;
    use_range?:        boolean;
    hostile?:          boolean;
    mp:                number;
    projectile?:       string;
    type:              StickyType;
    level?:            number;
    list?:             boolean;
    duration?:         number;
    condition?:        string;
    toggle?:           boolean;
    range?:            number;
    monsters?:         boolean;
    consume?:          string;
    slot?:             Array<string[]>;
    damage?:           number;
    inventory?:        string[];
    pierces_immunity?: boolean;
}

export interface Charm {
    explanation: string;
    cooldown:    number;
    skin:        string;
    duration:    number;
    condition:   string;
    name:        string;
    slot?:       Array<string[]>;
    target:      string;
    hostile?:    boolean;
    mp:          number;
    type:        StickyType;
    class?:      OldRole[];
    level?:      number;
    range?:      number;
}

export interface Cleave {
    explanation:        string;
    cooldown:           number;
    damage_type?:       DamageType;
    skin:               string;
    class:              OldRole[];
    procs?:             boolean;
    hostile?:           boolean;
    name:               string;
    level?:             number;
    wtype?:             string[];
    pierces_immunity?:  boolean;
    range?:             number;
    mp:                 number;
    type:               StickyType;
    consume?:           string;
    target?:            boolean;
    range_multiplier?:  number;
    damage_multiplier?: number;
    duration?:          number;
    condition?:         string;
}

export interface SkillsCurseAura {
    passive:     boolean;
    hostile:     boolean;
    name:        string;
    skin:        string;
    duration:    number;
    explanation: string;
    type:        string;
    condition:   string;
    aura:        boolean;
}

export interface Deepfreeze {
    hostile:     boolean;
    explanation: string;
    damage:      number;
    damage_type: DamageType;
    projectile:  string;
    type:        string;
    name:        string;
}

export interface Entangle {
    consume?:     string;
    explanation:  string;
    cooldown:     number;
    skin:         string;
    duration:     number;
    class:        OldRole[];
    condition:    string;
    target?:      boolean;
    name:         string;
    level:        number;
    range:        number;
    hostile:      boolean;
    mp:           number;
    type:         StickyType;
    monsters?:    boolean;
    damage_type?: DamageType;
    wtype?:       string;
}

export interface Ing {
    explanation:    string;
    skin:           string;
    class:          OldRole[];
    name:           string;
    level:          number;
    wtype:          string[];
    persistent:     boolean;
    range:          number;
    mp:             number;
    type:           StickyType;
    reuse_cooldown: number;
}

export interface Heal {
    explanation:         string;
    share:               string;
    damage_type:         DamageType;
    skin:                DamageType;
    class:               OldRole[];
    procs:               boolean;
    target:              boolean;
    name:                string;
    type:                string;
    use_range:           boolean;
    pierces_immunity:    boolean;
    projectile:          string;
    cooldown_multiplier: number;
    heal:                boolean;
}

export interface Invis {
    name:            string;
    explanation:     string;
    skin:            string;
    type:            string;
    class:           OldRole[];
    reuse_cooldown?: number;
    max?:            number;
}

export interface Mentalburst {
    warning?:          string;
    requirements?:     RequirementsClass;
    name:              string;
    explanation:       string;
    range_multiplier?: number;
    hostile:           boolean;
    damage_multiplier: number;
    projectile:        string;
    range_bonus?:      number;
    cooldown:          number;
    target:            boolean;
    damage_type:       DamageType;
    skin:              string;
    type:              StickyType;
    class:             OldRole[];
    mp:                number;
    wtype?:            string;
    pierces_immunity?: boolean;
    use_range?:        boolean;
    share?:            string;
    procs?:            boolean;
    level?:            number;
}

export interface SkillsPartyheal {
    explanation: string;
    cooldown:    number;
    damage_type: DamageType;
    skin:        string;
    class:       OldRole[];
    multi:       boolean;
    name:        string;
    output:      number;
    levels:      Array<number[]>;
    mp:          number;
    projectile:  string;
    action:      DamageType;
    party:       boolean;
    type:        StickyType;
    heal:        boolean;
}

export interface Poisonarrow {
    wtype:       string[];
    damage_type: DamageType;
    name:        string;
    explanation: string;
    projectile:  string;
    damage:      number;
    hostile:     boolean;
    procs:       boolean;
    cooldown:    number;
    target:      boolean;
    mp:          number;
    skin:        string;
    duration:    number;
    use_range:   boolean;
    type:        StickyType;
    class:       OldRole[];
    condition:   string;
    consume:     string;
}

export interface PureEval {
    code:        boolean;
    name:        string;
    explanation: string;
    skins:       string[];
    skin:        string;
    type:        string;
}

export interface ZapperzapClass {
    kill_buff?:  string;
    explanation: string;
    cooldown:    number;
    target:      boolean;
    damage_type: DamageType;
    skin:        string;
    class?:      OldRole[];
    name:        string;
    hostile:     boolean;
    level?:      number;
    damage:      number;
    range:       number;
    mp:          number;
    projectile:  string;
    type:        StickyType;
    slot?:       Array<string[]>;
}

export interface Regen {
    name:                string;
    type:                string;
    explanation:         string;
    share:               string;
    skin:                string;
    cooldown_multiplier: number;
}

export interface Stone {
    name:        string;
    explanation: string;
    duration:    number;
    type:        string;
    condition:   string;
    hostile:     boolean;
}

export interface Throw {
    code:             string;
    nprop:            string[];
    name:             string;
    level:            number;
    positive:         string[];
    explanation:      string;
    pierces_immunity: boolean;
    negative:         string[];
    hostile:          boolean;
    range:            number;
    cooldown:         number;
    target:           boolean;
    damage_type:      DamageType;
    skin:             string;
    type:             StickyType;
    class:            OldRole[];
    mp:               number;
}

export interface Tilesets {
    house:    TokyoClownTriggerfish;
    puzzle:   CustomA;
    custom2:  TokyoClownTriggerfish;
    ship:     TokyoClownTriggerfish;
    dungeon:  TokyoClownTriggerfish;
    stands:   TokyoClownTriggerfish;
    winter:   TokyoClownTriggerfish;
    custom:   TokyoClownTriggerfish;
    lights:   Lights;
    outside:  TokyoClownTriggerfish;
    doors:    TokyoClownTriggerfish;
    new:      TokyoClownTriggerfish;
    beach:    TokyoClownTriggerfish;
    custom_a: CustomA;
    water:    CustomA;
    ash:      TokyoClownTriggerfish;
    fort:     TokyoClownTriggerfish;
    dark:     TokyoClownTriggerfish;
    inside:   TokyoClownTriggerfish;
    tree:     TokyoClownTriggerfish;
    jungle:   TokyoClownTriggerfish;
    castle:   TokyoClownTriggerfish;
    ruins:    TokyoClownTriggerfish;
    licht:    TokyoClownTriggerfish;
}

export interface TokyoClownTriggerfish {
    file: string;
}

export interface CustomA {
    frames:      number;
    frame_width: number;
    file:        string;
}

export interface Lights {
    light: string;
    file:  string;
}

export interface TokensClass {
    pvptoken:     Pvptoken;
    funtoken:     Funtoken;
    friendtoken:  unknown;
    monstertoken: { [key: string]: number };
}

export interface Funtoken {
    partyhat:    number;
    rabbitsfoot: number;
    mshield:     number;
    exoarm:      number;
    xshield:     number;
    smoke:       number;
    confetti:    number;
}

export interface Pvptoken {
    harbringer: number;
    spear:      number;
    weaponbox:  number;
    armorbox:   number;
    t2bow:      number;
    hammer:     number;
}
